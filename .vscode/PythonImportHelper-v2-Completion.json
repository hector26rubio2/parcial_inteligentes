[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "Cut",
        "importPath": "cargarDatos.cut",
        "description": "cargarDatos.cut",
        "isExtraImport": true,
        "detail": "cargarDatos.cut",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "Prediccion",
        "importPath": "Prediccion",
        "description": "Prediccion",
        "isExtraImport": true,
        "detail": "Prediccion",
        "documentation": {}
    },
    {
        "label": "Recorta",
        "importPath": "recorte",
        "description": "recorte",
        "isExtraImport": true,
        "detail": "recorte",
        "documentation": {}
    },
    {
        "label": "InputLayer",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPool2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Reshape",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "load_model",
        "importPath": "tensorflow.python.keras.models",
        "description": "tensorflow.python.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.python.keras.models",
        "documentation": {}
    },
    {
        "label": "CargarDataSet",
        "kind": 6,
        "importPath": "cargarDatos.cargarDataset",
        "description": "cargarDatos.cargarDataset",
        "peekOfCode": "class CargarDataSet:\n    def cargarData(self):\n        carpetas = [7, 8, 9, 10,11,12,13 ]\n        dir = \"datos/\"\n        newd = \"dataset/\"\n        for i in carpetas:\n            # The list of items\n            files = os.listdir(f\"{dir}{i}\")\n            xTrain, xTest = train_test_split(files, test_size=0.20, random_state=42)\n            # Loop to print each filename separately",
        "detail": "cargarDatos.cargarDataset",
        "documentation": {}
    },
    {
        "label": "CargarImagen",
        "kind": 6,
        "importPath": "cargarDatos.cargarImagen",
        "description": "cargarDatos.cargarImagen",
        "peekOfCode": "class CargarImagen:\n    def __init__(self,carta):\n        self.nameWindow = \"Calculadora Canny\"\n        self.camara = cv2.VideoCapture(1)\n        self.recorte = Cut(carta=carta)\n        self.idImg = 1\n        self.constructorVentana()  # Create trackbars\n    def nothing(self, x):\n        pass\n    def constructorVentana(self):",
        "detail": "cargarDatos.cargarImagen",
        "documentation": {}
    },
    {
        "label": "Cut",
        "kind": 6,
        "importPath": "cargarDatos.cut",
        "description": "cargarDatos.cut",
        "peekOfCode": "class Cut:\n    def __init__(self, carta):\n        self.carta = carta\n    def crop(self, image, contours, num, bordes, gris):\n        pru = image\n        new_img = bordes\n        idNum = num\n        for c in contours:\n            area = cv2.contourArea(c)\n            if area == 0:",
        "detail": "cargarDatos.cut",
        "documentation": {}
    },
    {
        "label": "calcularAreas",
        "kind": 2,
        "importPath": "main.control",
        "description": "main.control",
        "peekOfCode": "def calcularAreas(figura):\n    areas = []\n    for figuraActual in figura:\n        areas.append(cv2.contourArea(figuraActual))\n    return areas\n####    CARGA LAS IMAGENES QUE SE ESTÁN EN LA CARPETA \"imagenesPrueba\"\ndef cargarDatos(numeroCategorias):\n    imagenesCargadas = []\n    for categoria in range(1, numeroCategorias):\n        ruta = \"imagenesPrueba/\" + str(categoria) + \"_1.jpg\"",
        "detail": "main.control",
        "documentation": {}
    },
    {
        "label": "cargarDatos",
        "kind": 2,
        "importPath": "main.control",
        "description": "main.control",
        "peekOfCode": "def cargarDatos(numeroCategorias):\n    imagenesCargadas = []\n    for categoria in range(1, numeroCategorias):\n        ruta = \"imagenesPrueba/\" + str(categoria) + \"_1.jpg\"\n        imagen = cv2.imread(ruta)\n        imagenesCargadas.append(imagen)\n    return imagenesCargadas\n###     ELIMINA LAS IMAGENES QUE SE HAN TOMADO\ndef eliminarImagenes():\n    py_files = glob.glob('imagenesPrueba/*.jpg')",
        "detail": "main.control",
        "documentation": {}
    },
    {
        "label": "eliminarImagenes",
        "kind": 2,
        "importPath": "main.control",
        "description": "main.control",
        "peekOfCode": "def eliminarImagenes():\n    py_files = glob.glob('imagenesPrueba/*.jpg')\n    for py_file in py_files:\n        try:\n            os.remove(py_file)\n        except OSError as e:\n            print(f\"Error:{e.strerror}\")\ndef detectarPoligono(imagen):\n    global num, suma, acumulado\n    global flag",
        "detail": "main.control",
        "documentation": {}
    },
    {
        "label": "detectarPoligono",
        "kind": 2,
        "importPath": "main.control",
        "description": "main.control",
        "peekOfCode": "def detectarPoligono(imagen):\n    global num, suma, acumulado\n    global flag\n    # PREPROCESADO DE LA IMÁGEN\n    imagenGris = cv2.cvtColor(imagen, cv2.COLOR_BGR2GRAY)\n    bordes = cv2.Canny(imagenGris, 59, 86)\n    kernel = np.ones((2, 2), np.uint8)\n    bordes = cv2.dilate(bordes, kernel)\n    ######### DETECCIÓN DE IMÁGEN ################\n    # RETR_EXTERNAL solo para contornos padres",
        "detail": "main.control",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "main.control",
        "description": "main.control",
        "peekOfCode": "num = 1  # Número que lleva el conteo de las fotos tomadas\nsuma = 0\nacumulado = 0  # Lleva el acumulado de la suma de las cartas\nflag = False  # Bandera que se habilita para realizar las operaciones\nvideo = cv2.VideoCapture(1)  # Abrir camara\ndir_root=\"C:/Users/hecto/PycharmProjects/parcial_2/modelos/models/\"\nmodeloCNN = Prediccion(dir_root+\"modeloA.h5\", 128, 128) #Cargar el modelo\nwhile True:\n    _, imagen = video.read()\n    imgBorder, shapes = detectarPoligono(imagen)",
        "detail": "main.control",
        "documentation": {}
    },
    {
        "label": "suma",
        "kind": 5,
        "importPath": "main.control",
        "description": "main.control",
        "peekOfCode": "suma = 0\nacumulado = 0  # Lleva el acumulado de la suma de las cartas\nflag = False  # Bandera que se habilita para realizar las operaciones\nvideo = cv2.VideoCapture(1)  # Abrir camara\ndir_root=\"C:/Users/hecto/PycharmProjects/parcial_2/modelos/models/\"\nmodeloCNN = Prediccion(dir_root+\"modeloA.h5\", 128, 128) #Cargar el modelo\nwhile True:\n    _, imagen = video.read()\n    imgBorder, shapes = detectarPoligono(imagen)\n    small_img = Recorta()",
        "detail": "main.control",
        "documentation": {}
    },
    {
        "label": "acumulado",
        "kind": 5,
        "importPath": "main.control",
        "description": "main.control",
        "peekOfCode": "acumulado = 0  # Lleva el acumulado de la suma de las cartas\nflag = False  # Bandera que se habilita para realizar las operaciones\nvideo = cv2.VideoCapture(1)  # Abrir camara\ndir_root=\"C:/Users/hecto/PycharmProjects/parcial_2/modelos/models/\"\nmodeloCNN = Prediccion(dir_root+\"modeloA.h5\", 128, 128) #Cargar el modelo\nwhile True:\n    _, imagen = video.read()\n    imgBorder, shapes = detectarPoligono(imagen)\n    small_img = Recorta()\n    cv2.imshow(\"Imagen\", imagen)",
        "detail": "main.control",
        "documentation": {}
    },
    {
        "label": "flag",
        "kind": 5,
        "importPath": "main.control",
        "description": "main.control",
        "peekOfCode": "flag = False  # Bandera que se habilita para realizar las operaciones\nvideo = cv2.VideoCapture(1)  # Abrir camara\ndir_root=\"C:/Users/hecto/PycharmProjects/parcial_2/modelos/models/\"\nmodeloCNN = Prediccion(dir_root+\"modeloA.h5\", 128, 128) #Cargar el modelo\nwhile True:\n    _, imagen = video.read()\n    imgBorder, shapes = detectarPoligono(imagen)\n    small_img = Recorta()\n    cv2.imshow(\"Imagen\", imagen)\n    # Cerrar la ventana",
        "detail": "main.control",
        "documentation": {}
    },
    {
        "label": "video",
        "kind": 5,
        "importPath": "main.control",
        "description": "main.control",
        "peekOfCode": "video = cv2.VideoCapture(1)  # Abrir camara\ndir_root=\"C:/Users/hecto/PycharmProjects/parcial_2/modelos/models/\"\nmodeloCNN = Prediccion(dir_root+\"modeloA.h5\", 128, 128) #Cargar el modelo\nwhile True:\n    _, imagen = video.read()\n    imgBorder, shapes = detectarPoligono(imagen)\n    small_img = Recorta()\n    cv2.imshow(\"Imagen\", imagen)\n    # Cerrar la ventana\n    k = cv2.waitKey(5) & 0xFF",
        "detail": "main.control",
        "documentation": {}
    },
    {
        "label": "modeloCNN",
        "kind": 5,
        "importPath": "main.control",
        "description": "main.control",
        "peekOfCode": "modeloCNN = Prediccion(dir_root+\"modeloA.h5\", 128, 128) #Cargar el modelo\nwhile True:\n    _, imagen = video.read()\n    imgBorder, shapes = detectarPoligono(imagen)\n    small_img = Recorta()\n    cv2.imshow(\"Imagen\", imagen)\n    # Cerrar la ventana\n    k = cv2.waitKey(5) & 0xFF\n    if k == 27:\n        break",
        "detail": "main.control",
        "documentation": {}
    },
    {
        "label": "Recorta",
        "kind": 6,
        "importPath": "main.recorte",
        "description": "main.recorte",
        "peekOfCode": "class Recorta:\n    def recortar(self, ruta, image, contours, category, num):\n        idNum = category\n        for cntr in contours:\n            x, y, w, h = cv2.boundingRect(cntr)\n            if w > 50 and h > 50:\n                # Redimenciona\n                new_img = image[y:y + h, x:x + w]\n                cv2.imwrite(ruta + str(idNum) + '_' + str(num) + '.jpg', new_img)\n                idNum = idNum + 1",
        "detail": "main.recorte",
        "documentation": {}
    },
    {
        "label": "NeuralNetwork",
        "kind": 6,
        "importPath": "modelos.entrenamiento_1",
        "description": "modelos.entrenamiento_1",
        "peekOfCode": "class NeuralNetwork:\n    def __init__(self):\n        self.ancho = 128\n        self.alto = 128\n        self.pixeles = self.ancho * self.alto\n        self.numeroCanales = 1\n        self.formaImagen = (self.ancho, self.alto, self.numeroCanales)\n        self.numeroCategorias = 7\n        self.model = None\n    def cargarDatos(self, rutaOrigen):",
        "detail": "modelos.entrenamiento_1",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "Prediccion",
        "kind": 6,
        "importPath": "Prediccion",
        "description": "Prediccion",
        "peekOfCode": "class Prediccion():\n    def __init__(self,ruta,ancho,alto):\n        self.modelo=load_model(ruta)\n        self.alto=alto\n        self.ancho=ancho\n    def predecir(self,imagen):\n        imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2GRAY)\n        imagen = cv2.resize(imagen, (self.ancho, self.alto))\n        imagen = imagen.flatten()\n        imagen = imagen / 255",
        "detail": "Prediccion",
        "documentation": {}
    }
]